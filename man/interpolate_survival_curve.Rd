% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adjust_hazard_rate.R
\name{interpolate_survival_curve}
\alias{interpolate_survival_curve}
\title{Interpolate Survival Curve for a Range of Ages}
\usage{
interpolate_survival_curve(
  survival_curve_ages,
  survival_curve,
  target_ages,
  interpolation_model = "gam",
  smr_multiplier = 1
)
}
\arguments{
\item{survival_curve_ages}{A numeric vector representing the ages corresponding to the
survival probabilities.}

\item{survival_curve}{A numeric vector of mortality probabilities (the
probability of dying) corresponding to `age`.}

\item{target_ages}{A numeric vector of ages for which the hazard rates are to
be predicted.}

\item{interpolation_model}{A character string specifying the model to use for
fitting the log cumulative hazard. Options are "gam" (default) for
Generalized Additive Model and "spline" for spline model.}

\item{smr_multiplier}{A numeric value representing the Standardized Mortality
Ratio (SMR) multiplier. The SMR is used to adjust the mortality rates of the
population under study compared to a standard population. An SMR of 1
(default) indicates no difference in mortality rates, while an SMR greater
than 1 indicates higher mortality in the study population.}
}
\value{
A numeric vector of the interpolated survival function (curve).
ages.
}
\description{
This function fits a regression model to interpolate (calculate) the
probability of dying for a range of user-specified ages. The fitted model
regresses the cumulative hazard rate, which is transformed from the input
survival function (curve), on the corresponding age.
The cumulative hazard (\eqn{H(t)}) is related to the survival function
(\eqn{S(t)}) by:
\deqn{H(t) = -\log(S(t))}
where \eqn{S(t)} is the survival probability up to time \eqn{t}.
}
\examples{
\dontrun{
# Define age range and survival probabilities
df_lifeTable <- NeuroblastomaPSM::df_lifeTable_Jordan
mortality_probs <- df_lifeTable$`Both sexes`

# Calculate the survival curve
survival_curve <- NeuroblastomaPSM::get_lifeTable_survival_curve(
   mortality_probs = mortality_probs
)
age <- df_lifeTable$`Age Group`

# Define output ages
target_ages <- seq(9, 29, 7/365)

# Interpolate Survival Curve
v_interpolated_curve <- NeuroblastomaPSM::interpolate_survival_curve(
  survival_curve_ages = age,
  survival_curve = survival_curve,
  target_ages = target_ages
)

v_interpolated_curve

# Define output ages
target_ages2 <- seq(min(age), max(age), 7/365)

# Interpolate Survival Curve
set.seed(1)
v_interpolated_curve2 <- NeuroblastomaPSM::interpolate_survival_curve(
  survival_curve_ages = age,
  survival_curve = survival_curve,
  target_ages = target_ages2
)

v_interpolated_curve2

# Compare fitted and observed survival curves
plot(x = age, y = survival_curve, xlab = "Age", ylab = "Survival")
lines(x = target_ages2, y = v_interpolated_curve2, col = "blue")

# Interpolate Survival Curve with a SMR = 5.6
set.seed(1)
v_interpolated_curve3 <- NeuroblastomaPSM::interpolate_survival_curve(
  survival_curve_ages = age,
  survival_curve = survival_curve,
  target_ages = target_ages2,
  smr_multiplier = 5.6
)

v_interpolated_curve3

# Compare fitted and observed survival curves
plot(x = age, y = survival_curve, xlab = "Age", ylab = "Survival")
lines(x = target_ages2, y = v_interpolated_curve2, col = "blue")
lines(x = target_ages2, y = v_interpolated_curve3, col = "yellow")

# Interpolate Survival Curve with a SMR = 5.6 * 1.9
set.seed(1)
v_interpolated_curve4 <- NeuroblastomaPSM::interpolate_survival_curve(
  survival_curve_ages = age,
  survival_curve = survival_curve,
  target_ages = target_ages2,
  smr_multiplier = 5.6 * 1.9
)

v_interpolated_curve3

# Compare fitted and observed survival curves
plot(x = age, y = survival_curve, xlab = "Age", ylab = "Survival")
lines(x = target_ages2, y = v_interpolated_curve2, col = "blue")
lines(x = target_ages2, y = v_interpolated_curve3, col = "yellow")
lines(x = target_ages2, y = v_interpolated_curve4, col = "red")
}
}
