[{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/articles/PSM.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction:","title":"Partition Survival Model","text":"partitioned survival model (PSM) N distinct states quantifies likelihood patient occupying states specific time, given certain treatment. model relies overlapping survival curves estimate state membership, requiring total N-1 curves N-state configuration. model uses cumulative survival function, \\(S_n(t)\\), define chance patient either reaching surpassing certain health state \\(n\\) time \\(t\\). initial state, probability directly indicated \\(S_1(t)\\). determination membership intermediate states, second \\((n-1)^{th}\\), achieved difference \\(S_{n}(t) - S_{n-1}(t)\\). likelihood patient advances terminal state \\(N\\), often signifying death, given \\(1-S_{N-1}(t)\\), essentially complement cumulative survival next--last state. treatment strategy \\(k\\), model predicts separate survival curves time \\(t\\) treatment approach \\(k\\) individual patient \\(\\), based \\(L\\) parameters \\(\\alpha_l\\), may modified covariates \\(x_l\\), \\[ \\begin{aligned} S_{n}(t|\\alpha_{1n}(x_{1n, ik}), \\ldots, \\alpha_{Ln}(x_{Ln, ik})). \\end{aligned} \\] Quality-adjusted life years (QALYs) total costs health state, specific treatment patient scenario, derived integrating survival probability time, adjusted quality life weights costs. health state \\(h\\), calculations QALYs costs \\(m^{th}\\) costs category represented : \\[ \\begin{aligned} \\rm{QALYs}_{hik} &= \\int_{0}^{T} q_{hik}(t) e^{-rt} p_{hik}(t)dt \\\\ \\rm{Costs}_{m,hik} &= \\int_{0}^{T} c_{m,hik}(t) e^{-rt} p_{hik}(t)dt \\end{aligned} \\] , \\(q_{hik}\\) denotes quality--life weight, \\(c_{m,hik}\\) represents annualized costs, \\(r\\) stands discount rate, \\(p_{hik}(t)\\) signifies probability specific health state time \\(t\\). calculations span \\(T\\) time periods account QALYs associated costs.","code":""},{"path":[]},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/articles/PSM.html","id":"model-parameters","dir":"Articles","previous_headings":"The model:","what":"Model parameters:","title":"Partition Survival Model","text":"model parameters include time horizon decision problem states payoffs rewards.","code":"# Model parameters params <- list() params$time_horizon <- 10 params$cycles_per_year <- 12 params$c_TT  <- 2000 # place holder params$c_GD2 <- 3000 # place holder params$c_PPS <- 3200 # place holder params$u_EFS <- 0.23 # place holder params$u_PPS <- 0.23 # place holder params$disc_rate <- 0.035"},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/articles/PSM.html","id":"survival-curves","dir":"Articles","previous_headings":"The model:","what":"Survival curves:","title":"Partition Survival Model","text":"analysis documented Survival functions vignette suggests Gompertz model fits data best. parameters fitted Gompertz distribution employed section predict cumulative survival curves model time horizon.","code":"# Load the fitted `Gompertz` model parameters models_fit <- NeuroblastomaPSM::parametric_models  # Get the months from 0 to time horizon time_points <- seq(   from = 0,    to = params$time_horizon,    by = 1 / params$cycles_per_year )  # Predict cumulative survival df_survival_curves_long <- lapply(   X = names(models_fit) |>     `names<-`(names(models_fit)),   FUN = function(curve_nm) {     model_fit <- models_fit[[curve_nm]]          end_point <- ifelse(       test = grepl(pattern = \"OS\", x = curve_nm),       yes = \"OS\",       no = \"EFS\"     )          treatment_nm <- gsub(       pattern = paste0(\".\", end_point),       replacement = \"\",       x = curve_nm     )      NeuroblastomaPSM::predict_survival_curve(       surv_mod = model_fit,       treatment_name = treatment_nm,       end_point = end_point,       time_points = time_points     )   } ) |>   do.call(     what = rbind,     args = _   ) |>    `rownames<-`(NULL)  # View predicted cumulative survival dataframe rbind(   head(df_survival_curves_long, n = 5),    tail(df_survival_curves_long, n = 5) ) #>         treatment end_point        time  survival #> 1   Dinutuximab β       EFS  0.00000000 1.0000000 #> 2   Dinutuximab β       EFS  0.08333333 0.9613148 #> 3   Dinutuximab β       EFS  0.16666667 0.9264001 #> 4   Dinutuximab β       EFS  0.25000000 0.8948133 #> 5   Dinutuximab β       EFS  0.33333333 0.8661732 #> 480  Isotretinoin        OS  9.66666667 0.5485409 #> 481  Isotretinoin        OS  9.75000000 0.5481205 #> 482  Isotretinoin        OS  9.83333333 0.5477113 #> 483  Isotretinoin        OS  9.91666667 0.5473131 #> 484  Isotretinoin        OS 10.00000000 0.5469255"},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/articles/PSM.html","id":"state-membership-markov-trace","dir":"Articles","previous_headings":"The model:","what":"State membership (markov trace):","title":"Partition Survival Model","text":"model represented three health states, event free survival (EFS), post progression survival (PPS) death. Using predicted EFS OS, state membership estimated .","code":"# Pivoting wider using reshape() - long-formatted to wide-formatted df_survival_curves <- reshape(   data = df_survival_curves_long,   timevar = \"end_point\",   idvar = c(\"time\", \"treatment\"),   direction = \"wide\" )  # Renaming the columns since reshape() adds a prefix to the column names names(df_survival_curves) <- gsub(\"survival\\\\.\", \"\", names(df_survival_curves))  # Creating new columns df_survival_curves$PPS <- df_survival_curves$OS - df_survival_curves$EFS df_survival_curves$D <- 1 - df_survival_curves$OS  # Selecting and ordering the desired columns (select in tidyverse) df_survival_curves <- df_survival_curves[, c(\"time\", \"treatment\", \"EFS\", \"PPS\", \"D\")]  # View wide formatted predicted cumulative survival dataframe rbind(   head(df_survival_curves, n = 5),    tail(df_survival_curves, n = 5) ) #>            time     treatment       EFS        PPS          D #> 1    0.00000000 Dinutuximab β 1.0000000 0.00000000 0.00000000 #> 2    0.08333333 Dinutuximab β 0.9613148 0.02174250 0.01694267 #> 3    0.16666667 Dinutuximab β 0.9264001 0.04059241 0.03300746 #> 4    0.25000000 Dinutuximab β 0.8948133 0.05693773 0.04824901 #> 5    0.33333333 Dinutuximab β 0.8661732 0.07110898 0.06271787 #> 238  9.66666667  Isotretinoin 0.4442937 0.10424725 0.45145908 #> 239  9.75000000  Isotretinoin 0.4442650 0.10385549 0.45187954 #> 240  9.83333333  Isotretinoin 0.4442379 0.10347342 0.45228872 #> 241  9.91666667  Isotretinoin 0.4442122 0.10310083 0.45268695 #> 242 10.00000000  Isotretinoin 0.4441880 0.10273749 0.45307451  # Markov trace m_markov_trace <- df_survival_curves[, c(\"EFS\", \"PPS\", \"D\")]  # Confirm markov trace is valid stopifnot(   \"Markov trace does not sum up to 1.\" =     all(rowSums(m_markov_trace) == 1) )  # Visualize the markov trace df_survival_curves |>   reshape(     data = _,     varying = list(c(\"EFS\", \"PPS\", \"D\")),     v.names = \"prop\",     timevar = \"State\",     times = c(\"EFS\", \"PPS\", \"D\"),     direction = \"long\"   ) |>   ggplot2::ggplot(     mapping = ggplot2::aes(       x = time,       y = prop,       col = State     )   )+   ggplot2::geom_step() +   ggplot2::theme_classic() +   ggplot2::scale_y_continuous(name = \"Proportion\") +   ggplot2::scale_x_continuous(name = \"Time (years)\") +   ggplot2::scale_color_manual(     name = \"State\",     values = c(\"D\"= 1,                \"EFS\" = 2,                \"PPS\" = 3),     labels = c(\"D\"=\"Dead\",                \"EFS\" = \"EFS\",                \"PPS\" = \"PPS\")   ) +   ggplot2::facet_wrap(~treatment)"},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/articles/PSM.html","id":"economic-analysis","dir":"Articles","previous_headings":"The model:","what":"Economic Analysis:","title":"Partition Survival Model","text":"","code":"# create matrices for matrix multiplication m_TR_Isotretinoin <- as.matrix(   df_survival_curves[     df_survival_curves$treatment == \"Isotretinoin\", c(\"EFS\", \"PPS\", \"D\")   ] ) m_TR_Dinutuximab_β <- as.matrix(   df_survival_curves[     df_survival_curves$treatment == \"Dinutuximab β\", c(\"EFS\", \"PPS\", \"D\")   ] )  # create vectors of health states payoffs v_C_Isotretinoin <- c(\"EFS\" = params$c_TT,                       \"PPS\" = params$c_PPS,                       \"D\" = 0)  v_C_Dinutuximab_β <- c(\"EFS\" = params$c_GD2,                        \"PPS\" = params$c_PPS,                        \"D\" = 0) v_Util <- c(\"EFS\" = params$u_EFS,          \"PPS\" = params$u_PPS,          \"D\" = 0)  # Matrix multiplication of trace by: ## cost per cycle - gives total cost by cycle v_costs_Isotretinoin  <- m_TR_Isotretinoin %*%    (v_C_Isotretinoin / params$cycles_per_year) v_costs_Dinutuximab_β <- m_TR_Dinutuximab_β %*%    (v_C_Dinutuximab_β / params$cycles_per_year)  ## utility by cycle - gives total utility by cycle v_qalys_Isotretinoin  <- m_TR_Isotretinoin %*%    (v_Util / params$cycles_per_year) v_qalys_Dinutuximab_β <- m_TR_Dinutuximab_β %*%   (v_Util / params$cycles_per_year)  # Combine payoffs' calculations m_results <- cbind(   \"c_Isotretinoin\" = v_costs_Isotretinoin,   \"c_Dinutuximab_β\" = v_costs_Dinutuximab_β,   \"q_Isotretinoin\" = v_qalys_Isotretinoin,   \"q_Dinutuximab_β\" = v_qalys_Dinutuximab_β ) |>   `colnames<-`(c(\"c_Isotretinoin\", \"c_Dinutuximab_β\", \"q_Isotretinoin\", \"q_Dinutuximab_β\"))  # Calculate discount weights v_dw <- 1 /(1 + params$disc_rate) ^ time_points  # Apply discount weights to all columns of results matrix simultaneously ## this gives total discounted costs and qalys over the whole period. m_disc_res <- v_dw %*% m_results |>   `colnames<-`(c(\"c_Isotretinoin\", \"c_Dinutuximab_β\", \"q_Isotretinoin\", \"q_Dinutuximab_β\"))  # Calculate incremental costs and utilities inc_cost  <- m_disc_res[, \"c_Dinutuximab_β\"] - m_disc_res[, \"c_Isotretinoin\"] inc_qaly  <- m_disc_res[, \"q_Dinutuximab_β\"] - m_disc_res[, \"q_Isotretinoin\"]  # calculate the ICER as.numeric(inc_cost / inc_qaly) #> [1] 68743.58"},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/articles/Processing_IPD.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction:","title":"Processing IPD","text":"survival analysis, individual patient data (IPD) often considered gold standard. However, IPD available, researchers sometimes rely aggregate data presented published articles, often include Kaplan-Meier survival curves. Digitization graphs method used extract approximate IPD published survival plots, enabling detailed flexible analyses possible aggregate data alone. process digitizing graphs obtain IPD involves several steps: Graph Identification Selection: first step involves identifying selecting Kaplan-Meier survival curves relevant survival graphs published literature wish digitize. Preparation Digitization: usually involves scanning, downloading, taking high-resolution screenshot graph ’s digital format. image clear large enough accurately identify mark data points. Using Digitization Software: various software tools available digitizing graphs (e.g., WebPlotDigitizer, DigitizeIt, PlotDigitizer). tools allow user upload graph image, calibrate axes marking known points (e.g., time survival probability axes), manually automatically extract data points graph. software translates positions points coordinates based calibration. Data Extraction: clicking hovering curve various points, digitization software captures coordinates, correspond time (X-axis) survival probability (Y-axis) relevant metrics. step critical requires careful attention ensure accuracy, especially key points censored data marks significant changes slope curve. Exporting Cleaning Data: extracted data points can exported data analysis software spreadsheets cleaning analysis. may involve interpolating points, dealing censored observations, converting survival probabilities approximate IPD. Statistical Analysis: digitized data, researchers can perform various survival analyses, estimating survival rates specific times, comparing survival curves, even conducting individual-level meta-analyses data multiple studies digitized. Validation Sensitivity Analysis: ’s crucial validate digitized data published results (available) ensure accuracy. Additionally, sensitivity analyses may conducted assess variations digitization process (e.g., differences point selection) might affect results. process allows researchers overcome limitations access IPD enables comprehensive analyses possible aggregate survival data. However, ’s important acknowledge digitized data may capture nuances original IPD method involves approximation. Therefore, results derived digitized data interpreted caution , possible, validated sources. vignette documents process succeeding digitization process. aim process combine data different curves single dataset.","code":""},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/articles/Processing_IPD.html","id":"combining-datasets","dir":"Articles","previous_headings":"","what":"Combining datasets:","title":"Processing IPD","text":"following code chunk documents IPD survival curves combined single dataset. combined dataset saved package analysis. chunk code meant reflect one part package development; therefore, users/readers vignette advised execute following chunk code.","code":"IPD_curves_data_path <- list.files(path = \"data/\") treatments_codes <- c(\"Iso\", \"Deni\") curves_codes <- c(\"OS\", \"EFS\")  IPD_data <- lapply(   X = treatments_codes,   FUN = function(treatment_cd) {     treatments_file_names <- IPD_curves_data_path[grepl(       pattern = treatment_cd,       x = IPD_curves_data_path     )]     lapply(       X = curves_codes,       FUN = function(curve_cd) {         target_file <- treatments_file_names[grepl(           pattern = curve_cd,           x = treatments_file_names         )]         # Read identified file:         ipd_data <- read.csv(file = paste0(\"data/\", target_file)) |>           cbind(             \"trt_cd\" = ifelse(treatment_cd == \"Iso\", \"TT\", \"GD2\"),             \"curve\" = curve_cd           )       }) |>       do.call(         what = rbind,         args = _       )   }) |>   do.call(     what = rbind,     args = _   ) IPD_data[[\"treatment\"]] <- ifelse(   test = IPD_data$trt_cd == \"TT\",   yes = \"Isotretinoin\",   no = \"Dinutuximab β\" ) IPD_data <- IPD_data[, c(1, 4, 5, 2, 3)] |>   `colnames<-`(     x = _,     value = c(\"trt\", \"trt_cd\", \"curve\", \"eventtime\", \"event\")   )  rbind(head(IPD_data), tail(IPD_data))"},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/articles/Survival_functions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction:","title":"Survival functions","text":"Survival Analysis statistical approach enables examination event occurrence rates time without assuming rates remain constant. Principally, facilitates modeling duration event’s occurrence, comparison durations across diverse groups, investigation relationship time--event quantitative variables. method particularly adept handling censored data, scenario event interest (death, failure, recovery) hasn’t occurred subjects study period. Hazard Function represents instant rate event occurrence given time point, t. Unlike assumption constant hazard rates analyses, survival analysis recognizes variability rates time. cumulative hazard aggregates hazard experienced time t. Survival Function defined likelihood individual’s survival—alternatively, non-occurrence event interest—certain point time, t. Mathematically, ’s depicted \\(S(t) = Pr(T>t)\\), \\(S\\) representing probability value 0 1, given survival times non-negative (\\(T \\geq 0\\)). \\[ S(t) = Pr(T>t) \\] Kaplan-Meier Curve visualizes survival function step function, marking cumulative probability survival time. remains horizontal intervals without events, dropping points events occur, reflecting changes survival function. Censoring Survival Analysis unique aspect concerning missing data wherein event interest observed certain subjects study’s end, either due withdrawal non-event-related reasons. predominant form encountered right censoring, left censoring occurring start time unknown. hazard ratio (HR) key metric derived Cox regression analysis. ratio quantifies comparative hazards two distinct groups given moment. reflects instant rate event interest occurs among still susceptible . Importantly, construed measure risk, although frequently misunderstood way. regression coefficient \\(\\beta\\), hazard ratio computed HR = \\(\\exp(\\beta)\\). HR less 1 suggests lower hazard event study, typically death, group question compared reference group. Conversely, HR greater 1 indicates higher hazard event group question. Thus, HR 0.59 mean hazard females 0.59 times males specific time point, signifying females markedly lower hazard death compared males according dataset. Proportional Hazards Assumption fundamental comparing survival functions across groups, different patient cohorts, assumption necessitate constant hazards maintains constant hazard ratio time, enabling comparisons hazard rates across different observation periods.","code":""},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/articles/Survival_functions.html","id":"survival-objects","dir":"Articles","previous_headings":"","what":"Survival objects:","title":"Survival functions","text":"Utilizing {survival} package, Surv() function generates survival object suitable response model’s formula. subject represented survival time object, censored subjects marked +. ’s glimpse reconstructed individual patient data (IPD):","code":"IPD_data <- NeuroblastomaPSM::IPD_data # Split IPD by curves and treatments:  IPD_curves_trts <- split(   x = IPD_data,   f = interaction(IPD_data$trt, IPD_data$curve)  )  lapply(   X = names(IPD_curves_trts) |>     `names<-`(names(IPD_curves_trts)),   FUN = function(surv_data_nm) {     print(gsub(\"\\\\.\", \" \", surv_data_nm))          surv_data <- IPD_curves_trts[[surv_data_nm]]     print(rbind(head(surv_data, n = 5), tail(surv_data, n = 5)))   } ) |>   invisible() #> [1] \"Dinutuximab β EFS\" #>               trt trt_cd curve eventtime event #> 425 Dinutuximab β    GD2   EFS     0.013     1 #> 426 Dinutuximab β    GD2   EFS     0.013     1 #> 427 Dinutuximab β    GD2   EFS     0.013     1 #> 428 Dinutuximab β    GD2   EFS     0.013     1 #> 429 Dinutuximab β    GD2   EFS     0.046     1 #> 620 Dinutuximab β    GD2   EFS     7.000     0 #> 621 Dinutuximab β    GD2   EFS     7.000     0 #> 622 Dinutuximab β    GD2   EFS     7.000     0 #> 623 Dinutuximab β    GD2   EFS     7.000     0 #> 624 Dinutuximab β    GD2   EFS     7.000     0 #> [1] \"Isotretinoin EFS\" #>              trt trt_cd curve   eventtime event #> 113 Isotretinoin     TT   EFS  0.03278242     1 #> 114 Isotretinoin     TT   EFS  0.03278242     1 #> 115 Isotretinoin     TT   EFS  0.04538207     1 #> 116 Isotretinoin     TT   EFS  0.07793117     1 #> 117 Isotretinoin     TT   EFS  0.12202994     1 #> 220 Isotretinoin     TT   EFS 14.70647482     0 #> 221 Isotretinoin     TT   EFS 14.70647482     0 #> 222 Isotretinoin     TT   EFS 14.70647482     0 #> 223 Isotretinoin     TT   EFS 14.70647482     0 #> 224 Isotretinoin     TT   EFS 14.70647482     0 #> [1] \"Dinutuximab β OS\" #>               trt trt_cd curve eventtime event #> 225 Dinutuximab β    GD2    OS 0.1504637     1 #> 226 Dinutuximab β    GD2    OS 0.1985816     1 #> 227 Dinutuximab β    GD2    OS 0.2908074     1 #> 228 Dinutuximab β    GD2    OS 0.2908074     1 #> 229 Dinutuximab β    GD2    OS 0.3212821     1 #> 420 Dinutuximab β    GD2    OS 6.9671577     0 #> 421 Dinutuximab β    GD2    OS 6.9671577     0 #> 422 Dinutuximab β    GD2    OS 6.9671577     0 #> 423 Dinutuximab β    GD2    OS 6.9671577     0 #> 424 Dinutuximab β    GD2    OS 6.9671577     0 #> [1] \"Isotretinoin OS\" #>              trt trt_cd curve   eventtime event #> 1   Isotretinoin     TT    OS  0.09677419     1 #> 2   Isotretinoin     TT    OS  0.30162856     1 #> 3   Isotretinoin     TT    OS  0.38686900     1 #> 4   Isotretinoin     TT    OS  0.38686900     1 #> 5   Isotretinoin     TT    OS  0.44697776     1 #> 108 Isotretinoin     TT    OS 14.72539931     0 #> 109 Isotretinoin     TT    OS 14.72539931     0 #> 110 Isotretinoin     TT    OS 14.72539931     0 #> 111 Isotretinoin     TT    OS 14.72539931     0 #> 112 Isotretinoin     TT    OS 14.72539931     0  # Split IPD by curves:  IPD_curves <- split(   x = IPD_data,   f = IPD_data$curve  ) lapply(   X = names(IPD_curves_trts) |>     `names<-`(names(IPD_curves_trts)),   FUN = function(trt_curve_nm) {     surv_data <- IPD_curves_trts[[trt_curve_nm]]     surv_obj <- survival::Surv(       time = surv_data$eventtime,       event = surv_data$event     )          print(gsub(\"\\\\.\", \" \", trt_curve_nm))      print(       c(head(surv_obj, n = 5), tail(surv_obj, n = 5))     )   } ) |>   invisible() #> [1] \"Dinutuximab β EFS\" #>  [1] 0.013  0.013  0.013  0.013  0.046  7.000+ 7.000+ 7.000+ 7.000+ 7.000+ #> [1] \"Isotretinoin EFS\" #>  [1]  0.03278242   0.03278242   0.04538207   0.07793117   0.12202994  #>  [6] 14.70647482+ 14.70647482+ 14.70647482+ 14.70647482+ 14.70647482+ #> [1] \"Dinutuximab β OS\" #>  [1] 0.1504637  0.1985816  0.2908074  0.2908074  0.3212821  6.9671577+ #>  [7] 6.9671577+ 6.9671577+ 6.9671577+ 6.9671577+ #> [1] \"Isotretinoin OS\" #>  [1]  0.09677419   0.30162856   0.38686900   0.38686900   0.44697776  #>  [6] 14.72539931+ 14.72539931+ 14.72539931+ 14.72539931+ 14.72539931+"},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/articles/Survival_functions.html","id":"non-parametric-methods-kaplan-meier-curves","dir":"Articles","previous_headings":"","what":"Non-Parametric Methods: Kaplan-Meier Curves","title":"Survival functions","text":"Kaplan-Meier method cornerstone survival analysis, offering straightforward way estimate survival probabilities without assuming specific statistical distribution event times. method employs non-parametric technique produce step function decreases time event observed. construct survival curves employing Kaplan-Meier method, one can use survfit() function. applying function, survival curve treatment created.","code":""},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/articles/Survival_functions.html","id":"kaplan-meier-estimeates","dir":"Articles","previous_headings":"Non-Parametric Methods: Kaplan-Meier Curves","what":"Kaplan-Meier estimeates:","title":"Survival functions","text":"","code":"# KM curves: survival_curves_estimates <- lapply(   X = names(IPD_curves_trts) |>     `names<-`(names(IPD_curves_trts)),   FUN = function(trt_curve_nm) {     surv_data <- IPD_curves_trts[[trt_curve_nm]]     surv_obj <- survival::survfit(       formula = survival::Surv(time = eventtime, event = event) ~ 1,       data = IPD_curves_trts[[trt_curve_nm]],       type = \"kaplan-meier\",       conf.type = \"log-log\"     )     cat(\"\\n\")     print(trt_curve_nm)     print(       x = surv_obj,        print.rmean = TRUE     )   } ) #>  #> [1] \"Dinutuximab β.EFS\" #> Call: survfit(formula = survival::Surv(time = eventtime, event = event) ~  #>     1, data = IPD_curves_trts[[trt_curve_nm]], type = \"kaplan-meier\",  #>     conf.type = \"log-log\") #>  #>        n events rmean* se(rmean) median 0.95LCL 0.95UCL #> [1,] 200     92   4.21     0.217     NA    2.64      NA #>     * restricted mean with upper limit =  7  #>  #> [1] \"Isotretinoin.EFS\" #> Call: survfit(formula = survival::Surv(time = eventtime, event = event) ~  #>     1, data = IPD_curves_trts[[trt_curve_nm]], type = \"kaplan-meier\",  #>     conf.type = \"log-log\") #>  #>        n events rmean* se(rmean) median 0.95LCL 0.95UCL #> [1,] 112     62   7.22     0.645   1.97    1.34      NA #>     * restricted mean with upper limit =  14.7  #>  #> [1] \"Dinutuximab β.OS\" #> Call: survfit(formula = survival::Surv(time = eventtime, event = event) ~  #>     1, data = IPD_curves_trts[[trt_curve_nm]], type = \"kaplan-meier\",  #>     conf.type = \"log-log\") #>  #>        n events rmean* se(rmean) median 0.95LCL 0.95UCL #> [1,] 200     71   5.02      0.19     NA      NA      NA #>     * restricted mean with upper limit =  6.97  #>  #> [1] \"Isotretinoin.OS\" #> Call: survfit(formula = survival::Surv(time = eventtime, event = event) ~  #>     1, data = IPD_curves_trts[[trt_curve_nm]], type = \"kaplan-meier\",  #>     conf.type = \"log-log\") #>  #>        n events rmean* se(rmean) median 0.95LCL 0.95UCL #> [1,] 112     53   8.93     0.588     NA    4.41      NA #>     * restricted mean with upper limit =  14.7"},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/articles/Survival_functions.html","id":"kaplan-meier-plots","dir":"Articles","previous_headings":"Non-Parametric Methods: Kaplan-Meier Curves","what":"Kaplan-Meier plots:","title":"Survival functions","text":"","code":"# KM curves: survival_curves_km <- lapply(   X = names(IPD_curves_trts) |>     `names<-`(names(IPD_curves_trts)),   FUN = function(trt_curve_nm) {     surv_data <- IPD_curves_trts[[trt_curve_nm]]     surv_obj <- survival::survfit(       formula = survival::Surv(time = eventtime, event = event) ~ 1,       data = IPD_curves_trts[[trt_curve_nm]]     )     plot(       surv_obj,       main = paste0(         \"Kaplan-Meier Curve for \",         gsub(           pattern = \"\\\\.\",           replacement = \" \",           x = trt_curve_nm         )       ),       xlab = \"Time (years)\",       ylab = \"Survival probability\"     )   } ) # KM curves, by treatment: survival_curves_trt_km <- lapply(   X = names(IPD_curves) |>     `names<-`(names(IPD_curves)),   FUN = function(curve_nm) {     surv_obj <- survival::survfit(       formula = survival::Surv(time = eventtime, event = event) ~ trt,       data = IPD_curves[[curve_nm]]     )     surv_plot <- survminer::ggsurvplot(       fit = surv_obj,       data = IPD_curves[[curve_nm]],       risk.table = TRUE,       title = curve_nm,       legend = \"none\",       legend.title = \"Treatment\",       legend.labs = unique(IPD_curves[[curve_nm]][[\"trt\"]]) |>          sort()     )     surv_plot$plot <- surv_plot$plot +        ggplot2::theme(plot.title.position = \"plot\")     print(surv_plot)     surv_obj   } )"},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/articles/Survival_functions.html","id":"fitting-parametric-models","dir":"Articles","previous_headings":"","what":"Fitting parametric models:","title":"Survival functions","text":"Parametric models assume specific statistical distribution time--event data. assumption allows extrapolation survival estimates beyond range observed data, particularly useful long-term survival predictions follow-may sufficiently long.","code":""},{"path":[]},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/articles/Survival_functions.html","id":"fitting-independent-survival-cuves","dir":"Articles","previous_headings":"Fitting parametric models: > Parametric models using maximum likelihood estimates (MLEs):","what":"Fitting independent survival cuves:","title":"Survival functions","text":"","code":"set.seed(1) # Define models to be used models <- c(\"exponential\", \"gamma\", \"gengamma\", \"gompertz\", \"weibull\", \"loglogistic\", \"lognormal\")   # Write formula specifying the predictor formula <- survival::Surv(time = eventtime, event = event) ~ 1  # Fit parametric models: parametric_models <- lapply(   X = names(IPD_curves_trts) |>     `names<-`(names(IPD_curves_trts)),   FUN = function(curves_trts_nm) {     surv_data <- IPD_curves_trts[[curves_trts_nm]]     surv_parametric_models <- survHE::fit.models(       formula = formula,        data = surv_data,        distr = models,       method = \"mle\"     )          p <- survHE::model.fit.plot(       surv_parametric_models,       scale = \"relative\"     )      print(       p +         ggplot2::theme(           plot.title.position = \"plot\",           text = ggplot2::element_text(size = 10),         )     )          p <- plot(surv_parametric_models, add.km = TRUE, t = seq(0, 10))     print(       p +         ggplot2::labs(           title = paste0(             \"MLE fitted parameteric models - \",             gsub(               pattern = \"\\\\.\",               replacement = \" \",               curves_trts_nm)           )         ) +         ggplot2::theme(plot.title.position = \"plot\")     )          lapply(       X = seq_along(models),       FUN = function(param_model) {         print(surv_parametric_models, mod = param_model)       }     )          surv_parametric_models   } ) #>  #> Model fit for the Exponential model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.020 seconds #>  #>          mean        se      L95%    U95% #> rate 0.118862 0.0123922 0.0968946 0.14581 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 577.882 #> Bayesian Information Criterion (BIC)..: 581.180 #>  #>  #> Model fit for the Gamma model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.045 seconds #>  #>            mean        se      L95%     U95% #> shape 0.4616622 0.0519674 0.3702611 0.575626 #> rate  0.0275372 0.0086535 0.0148742 0.050981 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 522.387 #> Bayesian Information Criterion (BIC)..: 528.984 #>  #>  #> Model fit for the Generalised Gamma model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.045 seconds #>  #>            mean       se      L95%      U95% #> mu     0.775818 0.508490 -0.220805  1.772440 #> sigma  3.024955 0.237000  2.594351  3.527030 #> Q     -1.137416 0.410403 -1.941791 -0.333042 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 494.155 #> Bayesian Information Criterion (BIC)..: 504.050 #>  #>  #> Model fit for the Gompertz model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.016 seconds #>  #>            mean        se      L95%      U95% #> shape -0.771794 0.0969357 -0.961785 -0.581804 #> rate   0.488828 0.0706664  0.368217  0.648946 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 466.408 #> Bayesian Information Criterion (BIC)..: 473.004 #>  #>  #> Model fit for the Weibull AF model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.010 seconds #>  #>            mean        se     L95%      U95% #> shape  0.515831 0.0486057 0.428845  0.620461 #> scale 13.958535 3.2335173 8.864569 21.979716 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 515.124 #> Bayesian Information Criterion (BIC)..: 521.720 #>  #>  #> Model fit for the log-Logistic model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.018 seconds #>  #>           mean        se     L95%     U95% #> shape 0.631025 0.0570624 0.528535 0.753388 #> scale 6.222787 1.4408343 3.952722 9.796558 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 505.164 #> Bayesian Information Criterion (BIC)..: 511.761 #>  #>  #> Model fit for the log-Normal model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.011 seconds #>  #>            mean       se    L95%    U95% #> meanlog 1.90977 0.244549 1.43047 2.38908 #> sdlog   2.68246 0.224748 2.27623 3.16119 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 498.888 #> Bayesian Information Criterion (BIC)..: 505.485 #>  #> Model fit for the Exponential model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.005 seconds #>  #>           mean         se      L95%     U95% #> rate 0.0766774 0.00973803 0.0597812 0.098349 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 444.450 #> Bayesian Information Criterion (BIC)..: 447.169 #>  #>  #> Model fit for the Gamma model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.020 seconds #>  #>            mean         se       L95%      U95% #> shape 0.3522684 0.04824272 0.26934117 0.4607281 #> rate  0.0114968 0.00475699 0.00510951 0.0258687 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 369.127 #> Bayesian Information Criterion (BIC)..: 374.564 #>  #>  #> Model fit for the Generalised Gamma model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.021 seconds #>  #>            mean       se     L95%      U95% #> mu    -0.431465 0.443078 -1.29988  0.436951 #> sigma  2.367955 0.266802  1.89875  2.953111 #> Q     -2.138324 0.440109 -3.00092 -1.275727 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 322.903 #> Bayesian Information Criterion (BIC)..: 331.058 #>  #>  #> Model fit for the Gompertz model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.014 seconds #>  #>            mean        se      L95%      U95% #> shape -0.676088 0.0959710 -0.864188 -0.487988 #> rate   0.549287 0.0935184  0.393440  0.766866 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 301.333 #> Bayesian Information Criterion (BIC)..: 306.770 #>  #>  #> Model fit for the Weibull AF model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.009 seconds #>  #>            mean        se      L95%      U95% #> shape  0.420334 0.0470044  0.337604  0.523337 #> scale 18.841571 6.0402439 10.051673 35.317983 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 359.662 #> Bayesian Information Criterion (BIC)..: 365.099 #>  #>  #> Model fit for the log-Logistic model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.016 seconds #>  #>          mean        se     L95%      U95% #> shape 0.55806 0.0599002 0.452185  0.688725 #> scale 5.81790 1.8848386 3.083193 10.978223 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 347.842 #> Bayesian Information Criterion (BIC)..: 353.279 #>  #>  #> Model fit for the log-Normal model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.011 seconds #>  #>            mean       se    L95%    U95% #> meanlog 1.88720 0.317390 1.26512 2.50927 #> sdlog   2.88844 0.293455 2.36692 3.52486 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 342.065 #> Bayesian Information Criterion (BIC)..: 347.502 #>  #> Model fit for the Exponential model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.006 seconds #>  #>           mean         se      L95%      U95% #> rate 0.0767895 0.00911324 0.0608531 0.0968994 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 508.470 #> Bayesian Information Criterion (BIC)..: 511.768 #>  #>  #> Model fit for the Gamma model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.016 seconds #>  #>            mean        se      L95%      U95% #> shape 0.6791529 0.0890740 0.5252047 0.8782265 #> rate  0.0358905 0.0116217 0.0190262 0.0677029 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 500.959 #> Bayesian Information Criterion (BIC)..: 507.556 #>  #>  #> Model fit for the Generalised Gamma model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.026 seconds #>  #>            mean       se      L95%     U95% #> mu     0.420406 0.384705 -0.333602  1.17441 #> sigma  1.958011 0.232639  1.551246  2.47144 #> Q     -2.835463 0.629894 -4.070032 -1.60089 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 467.018 #> Bayesian Information Criterion (BIC)..: 476.913 #>  #>  #> Model fit for the Gompertz model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.011 seconds #>  #>            mean        se      L95%      U95% #> shape -0.437065 0.0785315 -0.590984 -0.283146 #> rate   0.208811 0.0365708  0.148141  0.294328 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 470.201 #> Bayesian Information Criterion (BIC)..: 476.797 #>  #>  #> Model fit for the Weibull AF model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.007 seconds #>  #>            mean        se     L95%     U95% #> shape  0.700754 0.0764506  0.56585  0.86782 #> scale 18.891490 4.1623800 12.26649 29.09459 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 498.258 #> Bayesian Information Criterion (BIC)..: 504.855 #>  #>  #> Model fit for the log-Logistic model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.010 seconds #>  #>            mean        se    L95%      U95% #> shape  0.813005 0.0849176 0.66250  0.997701 #> scale 11.278239 2.3826063 7.45451 17.063320 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 492.135 #> Bayesian Information Criterion (BIC)..: 498.732 #>  #>  #> Model fit for the log-Normal model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.009 seconds #>  #>            mean       se    L95%    U95% #> meanlog 2.47599 0.224609 2.03577 2.91622 #> sdlog   2.07430 0.202461 1.71313 2.51161 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 484.194 #> Bayesian Information Criterion (BIC)..: 490.790 #>  #> Model fit for the Exponential model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.006 seconds #>  #>           mean         se      L95%      U95% #> rate 0.0529694 0.00727591 0.0404673 0.0693341 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 419.432 #> Bayesian Information Criterion (BIC)..: 422.151 #>  #>  #> Model fit for the Gamma model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.025 seconds #>  #>            mean         se       L95%      U95% #> shape 0.5484131 0.08420805 0.40588874 0.7409836 #> rate  0.0179479 0.00679396 0.00854672 0.0376899 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 403.768 #> Bayesian Information Criterion (BIC)..: 409.205 #>  #>  #> Model fit for the Generalised Gamma model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.021 seconds #>  #>           mean       se      L95%      U95% #> mu     1.01720 0.430972  0.172514  1.861894 #> sigma  2.17596 0.239791  1.753272  2.700562 #> Q     -1.90444 0.483808 -2.852686 -0.956192 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 377.339 #> Bayesian Information Criterion (BIC)..: 385.495 #>  #>  #> Model fit for the Gompertz model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.010 seconds #>  #>            mean        se      L95%      U95% #> shape -0.316976 0.0538462 -0.422512 -0.211439 #> rate   0.199665 0.0382985  0.137098  0.290787 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 364.319 #> Bayesian Information Criterion (BIC)..: 369.756 #>  #>  #> Model fit for the Weibull AF model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.006 seconds #>  #>           mean        se     L95%      U95% #> shape  0.59362 0.0737995  0.46525  0.757409 #> scale 27.22828 7.1596767 16.26285 45.587279 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 399.691 #> Bayesian Information Criterion (BIC)..: 405.128 #>  #>  #> Model fit for the log-Logistic model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.010 seconds #>  #>            mean        se     L95%      U95% #> shape  0.738167 0.0875116 0.585117  0.931251 #> scale 13.026803 3.3994379 7.811072 21.725261 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 392.443 #> Bayesian Information Criterion (BIC)..: 397.880 #>  #>  #> Model fit for the log-Normal model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.007 seconds #>  #>            mean       se    L95%    U95% #> meanlog 2.63022 0.265965 2.10894 3.15150 #> sdlog   2.22122 0.247771 1.78502 2.76402 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 387.246 #> Bayesian Information Criterion (BIC)..: 392.683"},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/articles/Survival_functions.html","id":"fitting-survival-curves-by-treatment","dir":"Articles","previous_headings":"Fitting parametric models: > Parametric models using maximum likelihood estimates (MLEs):","what":"Fitting survival curves by treatment:","title":"Survival functions","text":"","code":"set.seed(1) # Define models to be used models <- c(\"exponential\", \"gamma\", \"gengamma\", \"gompertz\", \"weibull\", \"weibullPH\", \"loglogistic\", \"lognormal\")   # Write formula specifying the predictor formula <- survival::Surv(time = eventtime, event = event) ~ as.factor(trt)  # Fit parametric models: parametric_models_trt <- lapply(   X = names(IPD_curves) |>     `names<-`(names(IPD_curves)),   FUN = function(curves_nm) {     surv_data <- IPD_curves[[curves_nm]]     surv_parametric_models <- survHE::fit.models(       formula = formula,        data = surv_data,        distr = models,       method = \"mle\"     )          p <- survHE::model.fit.plot(       surv_parametric_models,       scale = \"relative\"     )      print(       p +         ggplot2::theme(           plot.title.position = \"plot\",           text = ggplot2::element_text(size = 10),         )     )          p <- plot(surv_parametric_models, add.km = TRUE, t = seq(0, 10))     print(       p +         ggplot2::labs(           title = paste0(             \"MLE fitted parameteric models - \",             gsub(               pattern = \"\\\\.\",               replacement = \" \",               curves_nm)           )         ) +         ggplot2::theme(           plot.title.position = \"plot\",           # legend.text = ggplot2::element_text(size = 8),           # legend.title = ggplot2::element_text(size = 8)         )     )          lapply(       X = seq_along(models),       FUN = function(param_model) {         print(surv_parametric_models, mod = param_model)       }     )          surv_parametric_models   } ) #>  #> Model fit for the Exponential model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.009 seconds #>  #>                                 mean        se       L95%      U95% #> rate                        0.118862 0.0123922  0.0968946  0.145810 #> as.factor(trt)Isotretinoin -0.438358 0.1643125 -0.7604043 -0.116311 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 1022.332 #> Bayesian Information Criterion (BIC)..: 1029.818 #>  #>  #> Model fit for the Gamma model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.036 seconds #>  #>                                  mean         se       L95%      U95% #> shape                       0.4112712 0.03572089  0.3468944 0.4875950 #> rate                        0.0210414 0.00614059  0.0118759 0.0372807 #> as.factor(trt)Isotretinoin -0.2660013 0.31656550 -0.8864583 0.3544557 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 891.870 #> Bayesian Information Criterion (BIC)..: 903.099 #>  #>  #> Model fit for the Generalised Gamma model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.064 seconds #>  #>                                   mean       se      L95%      U95% #> mu                          0.28951910 0.398744 -0.492005  1.071043 #> sigma                       2.87338994 0.178113  2.544667  3.244577 #> Q                          -1.50188010 0.285066 -2.060599 -0.943161 #> as.factor(trt)Isotretinoin -0.00122724 0.349128 -0.685505  0.683051 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 817.839 #> Bayesian Information Criterion (BIC)..: 832.811 #>  #>  #> Model fit for the Gompertz model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.036 seconds #>  #>                                 mean        se       L95%      U95% #> shape                      -0.726308 0.0689756 -0.8614981 -0.591119 #> rate                        0.465813 0.0598414  0.3621263  0.599187 #> as.factor(trt)Isotretinoin  0.222220 0.1643144 -0.0998302  0.544271 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 766.230 #> Bayesian Information Criterion (BIC)..: 777.459 #>  #>  #> Model fit for the Weibull AF model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.015 seconds #>  #>                                  mean        se      L95%      U95% #> shape                       0.4708127 0.0338952  0.408853  0.542162 #> scale                      15.6867205 3.7969324  9.761148 25.209452 #> as.factor(trt)Isotretinoin  0.0847999 0.3514551 -0.604040  0.773639 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 874.771 #> Bayesian Information Criterion (BIC)..: 886.000 #>  #>  #> Model fit for the Weibull PH model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.024 seconds #>  #>                                  mean        se      L95%     U95% #> shape                       0.4708127 0.0338951  0.408854 0.542161 #> scale                       0.2736077 0.0313235  0.218615 0.342434 #> as.factor(trt)Isotretinoin -0.0399249 0.1658334 -0.364952 0.285103 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 874.771 #> Bayesian Information Criterion (BIC)..: 886.000 #>  #>  #> Model fit for the log-Logistic model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.021 seconds #>  #>                                 mean       se      L95%      U95% #> shape                       0.598071 0.041321  0.522327  0.684798 #> scale                       6.579575 1.550862  4.145361 10.443193 #> as.factor(trt)Isotretinoin -0.180768 0.368887 -0.903773  0.542237 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 851.780 #> Bayesian Information Criterion (BIC)..: 863.009 #>  #>  #> Model fit for the log-Normal model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.017 seconds #>  #>                                 mean       se      L95%     U95% #> meanlog                     1.955391 0.239781  1.485429 2.425353 #> sdlog                       2.767214 0.178823  2.438015 3.140863 #> as.factor(trt)Isotretinoin -0.117646 0.357465 -0.818265 0.582973 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 839.272 #> Bayesian Information Criterion (BIC)..: 850.501 #>  #> Model fit for the Exponential model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.009 seconds #>  #>                                  mean         se       L95%       U95% #> rate                        0.0767895 0.00911324  0.0608531  0.0968994 #> as.factor(trt)Isotretinoin -0.3713533 0.18152803 -0.7271417 -0.0155649 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 927.902 #> Bayesian Information Criterion (BIC)..: 935.388 #>  #>  #> Model fit for the Gamma model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.035 seconds #>  #>                                  mean         se      L95%      U95% #> shape                       0.6181381 0.06159460  0.508472 0.7514565 #> rate                        0.0291709 0.00825689  0.016750 0.0508024 #> as.factor(trt)Isotretinoin -0.2484417 0.26148253 -0.760938 0.2640546 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 903.851 #> Bayesian Information Criterion (BIC)..: 915.080 #>  #>  #> Model fit for the Generalised Gamma model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.055 seconds #>  #>                                  mean       se      L95%      U95% #> mu                          0.7626838 0.294464  0.185546  1.339822 #> sigma                       2.1024632 0.163794  1.804741  2.449299 #> Q                          -2.2764560 0.384736 -3.030525 -1.522387 #> as.factor(trt)Isotretinoin -0.0180095 0.250363 -0.508711  0.472692 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 841.795 #> Bayesian Information Criterion (BIC)..: 856.767 #>  #>  #> Model fit for the Gompertz model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.037 seconds #>  #>                                 mean        se      L95%      U95% #> shape                      -0.359927 0.0460276 -0.450140 -0.269715 #> rate                        0.182694 0.0265866  0.137358  0.242994 #> as.factor(trt)Isotretinoin  0.189991 0.1824706 -0.167644  0.547627 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 834.131 #> Bayesian Information Criterion (BIC)..: 845.360 #>  #>  #> Model fit for the Weibull AF model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.013 seconds #>  #>                                 mean        se      L95%      U95% #> shape                       0.649354 0.0532257  0.552982  0.762521 #> scale                      20.941809 4.5328731 13.701587 32.007925 #> as.factor(trt)Isotretinoin  0.177736 0.2828866 -0.376711  0.732184 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 896.963 #> Bayesian Information Criterion (BIC)..: 908.192 #>  #>  #> Model fit for the Weibull PH model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.023 seconds #>  #>                                 mean        se      L95%     U95% #> shape                       0.649354 0.0532255  0.552982 0.762521 #> scale                       0.138738 0.0203822  0.104026 0.185032 #> as.factor(trt)Isotretinoin -0.115414 0.1853776 -0.478747 0.247920 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 896.963 #> Bayesian Information Criterion (BIC)..: 908.192 #>  #>  #> Model fit for the log-Logistic model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.021 seconds #>  #>                                  mean        se      L95%      U95% #> shape                       0.7782094 0.0609487  0.667469  0.907323 #> scale                      11.8459099 2.4424688  7.907915 17.744952 #> as.factor(trt)Isotretinoin  0.0531255 0.2974557 -0.529877  0.636128 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 882.954 #> Bayesian Information Criterion (BIC)..: 894.183 #>  #>  #> Model fit for the log-Normal model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.016 seconds #>  #>                                 mean       se      L95%     U95% #> meanlog                    2.5213424 0.210812  2.108158 2.934527 #> sdlog                      2.1388640 0.157040  1.852192 2.469906 #> as.factor(trt)Isotretinoin 0.0662944 0.288606 -0.499363 0.631952 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 869.654 #> Bayesian Information Criterion (BIC)..: 880.883"},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/articles/Survival_functions.html","id":"best-parametric-model","dir":"Articles","previous_headings":"Fitting parametric models:","what":"Best parametric model:","title":"Survival functions","text":"Gompertz model seems best fits data offers best predictive performance survival curves interventions.","code":"set.seed(1) # Define models to be used models <- \"gompertz\"   # Write formula specifying the predictor formula <- survival::Surv(time = eventtime, event = event) ~ 1  # Fit parametric models: parametric_models <- lapply(   X = names(IPD_curves_trts) |>     `names<-`(names(IPD_curves_trts)),   FUN = function(curves_trts_nm) {     surv_data <- IPD_curves_trts[[curves_trts_nm]]     surv_parametric_models <- survHE::fit.models(       formula = formula,        data = surv_data,        distr = models,       method = \"mle\"     )          p <- plot(       surv_parametric_models,        add.km = TRUE,        t = seq(0, 10),        legend.position = \"none\"     )     print(       p +         ggplot2::coord_cartesian(xlim = c(0, 10)) +         ggplot2::labs(           title = paste0(             \"Gompertz fitted models - \",             gsub(               pattern = \"\\\\.\",               replacement = \" \",               curves_trts_nm)           )         ) +         ggplot2::theme(plot.title.position = \"plot\")     )          lapply(       X = seq_along(models),       FUN = function(param_model) {         print(surv_parametric_models, mod = param_model)       }     )          surv_parametric_models$models$Gompertz   } ) #>  #> Model fit for the Gompertz model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.018 seconds #>  #>            mean        se      L95%      U95% #> shape -0.771794 0.0969357 -0.961785 -0.581804 #> rate   0.488828 0.0706664  0.368217  0.648946 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 466.408 #> Bayesian Information Criterion (BIC)..: 473.004 #>  #> Model fit for the Gompertz model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.010 seconds #>  #>            mean        se      L95%      U95% #> shape -0.676088 0.0959710 -0.864188 -0.487988 #> rate   0.549287 0.0935184  0.393440  0.766866 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 301.333 #> Bayesian Information Criterion (BIC)..: 306.770 #>  #> Model fit for the Gompertz model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.027 seconds #>  #>            mean        se      L95%      U95% #> shape -0.437065 0.0785315 -0.590984 -0.283146 #> rate   0.208811 0.0365708  0.148141  0.294328 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 470.201 #> Bayesian Information Criterion (BIC)..: 476.797 #>  #> Model fit for the Gompertz model, obtained using Flexsurvreg  #> (Maximum Likelihood Estimate). Running time: 0.017 seconds #>  #>            mean        se      L95%      U95% #> shape -0.316976 0.0538462 -0.422512 -0.211439 #> rate   0.199665 0.0382985  0.137098  0.290787 #>  #> Model fitting summaries #> Akaike Information Criterion (AIC)....: 364.319 #> Bayesian Information Criterion (BIC)..: 369.756"},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/articles/Survival_functions.html","id":"probabilistic-sensitivity-analysis-psa","dir":"Articles","previous_headings":"","what":"Probabilistic Sensitivity Analysis (PSA):","title":"Survival functions","text":"TODO","code":""},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Wael Mohammed. Author, maintainer.            <href=\"https://github.com/W-Mohammed/\" target=\"_blank\" aria-label=\"GitHub\" class=\"external-link\"><span class=\"fa-brands fa-github\" aria-hidden=\"true\"><\/span><\/>,<href=\"https://www.linkedin.com//wael-mohammed/\" target=\"_blank\" aria-label=\"LinkedIn\" class=\"external-link\"><span class=\"fa-brands fa-linkedin-\" aria-hidden=\"true\"><\/span><\/>,<href=\"https://x.com/Wael_Mohammed_\" target=\"_blank\" aria-label=\"X\" class=\"external-link\"><span class=\"fa-brands fa-x-twitter\" aria-hidden=\"true\"><\/span><\/>","code":""},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mohammed W (2024). NeuroblastomaPSM: Neuroblastoma Partitioned Survival Model. R package version 0.1.0, https://w-mohammed.github.io/NeuroblastomaPSM/, https://github.com/W-Mohammed/NeuroblastomaPSM.","code":"@Manual{,   title = {NeuroblastomaPSM: Neuroblastoma Partitioned Survival Model},   author = {Wael Mohammed},   year = {2024},   note = {R package version 0.1.0, https://w-mohammed.github.io/NeuroblastomaPSM/},   url = {https://github.com/W-Mohammed/NeuroblastomaPSM}, }"},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/index.html","id":"introduction-to-neuroblastomapsm","dir":"","previous_headings":"","what":"Neuroblastoma Partitioned Survival Model","title":"Neuroblastoma Partitioned Survival Model","text":"NeuroblastomaPSM (Neuroblastoma Partitioned Survival Model) package documents cost-effectiveness Dinutuximab Beta (Qarziba®) treatment high-risk neuroblastoma patients stem cell transplantation.","code":""},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Neuroblastoma Partitioned Survival Model","text":"can install development version NeuroblastomaPSM GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"W-Mohammed/NeuroblastomaPSM\")"},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/index.html","id":"building-vignettes-without-installation","dir":"","previous_headings":"","what":"Building vignettes without installation","title":"Neuroblastoma Partitioned Survival Model","text":"vignettes available package’s website. However, one can locally build package vignettes cloning repository, restoring renv library building documents :","code":"# install.packages(\"renv\") renv::restore() # install.packages(\"devtools\") devtools::document()"},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/reference/predict_survival_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Cumulative Survival Curve — predict_survival_curve","title":"Predict Cumulative Survival Curve — predict_survival_curve","text":"Predict survival probabilities specified time points survival model object, labels treatment endpoint information.","code":""},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/reference/predict_survival_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Cumulative Survival Curve — predict_survival_curve","text":"","code":"predict_survival_curve(surv_mod, treatment_name, end_point, time_points)"},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/reference/predict_survival_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Cumulative Survival Curve — predict_survival_curve","text":"surv_mod survival model object extract survival probabilities. treatment_name Character string specifying treatment name associated survival model. end_point Character string indicating endpoint survival model based . time_points Numeric vector time points survival probabilities calculated.","code":""},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/reference/predict_survival_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Cumulative Survival Curve — predict_survival_curve","text":"data frame survival probabilities specified time points,         labeled treatment end point information.","code":""},{"path":"https://w-mohammed.github.io/NeuroblastomaPSM/reference/predict_survival_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Cumulative Survival Curve — predict_survival_curve","text":"","code":"if (FALSE) { fit <- survival::survfit(     survival::Surv(eventtime, event) ~ 1,     data = IPD_data[IPD_data$trt_cd == \"TT\",] ) survival_curve <- predict_survival_curve(     surv_mod = fit,     treatment_name = \"Isotretinoin\",     end_point = \"OS\",     time_points = seq(0, 10, 1/12) ) }"}]
